#pragma kernel FsrUpSample
#pragma kernel Init

#define A_GPU 1
#define A_HLSL 1
#include "Assets/ffx-fsr/ffx_a.hlsl"
#define FSR_EASU_F 1
#include "Assets/ffx-fsr/ffx_fsr1.hlsl"

RWStructuredBuffer<uint4> easuParameters;
RWTexture2D<AF4> outputTex;
Texture2D<AF4> inputTex;
SamplerState samLinearClamp;
float4 easuViewportSize;
float4 easuInputImageSize;
float4 easuOutputSize;

AF4 FsrEasuRF(AF2 p)
{
    AF4 res = inputTex.GatherRed(samLinearClamp, p, ASU2(0, 0));
    return res;
}

AF4 FsrEasuGF(AF2 p)
{
    AF4 res = inputTex.GatherGreen(samLinearClamp, p, ASU2(0, 0));
    return res;
}

AF4 FsrEasuBF(AF2 p)
{
    AF4 res = inputTex.GatherBlue(samLinearClamp, p, ASU2(0, 0));
    return res;
}

[numthreads(64,1,1)]
void FsrUpSample(uint3 id : SV_DispatchThreadID, uint3 workGroupId : SV_GroupId, uint3 localThreadId : SV_GroupThreadId)
{
    AU2 gxy = ARmp8x8(localThreadId.x) + AU2(workGroupId.x << 4u, workGroupId.y << 4u);
    AF3 col = AF3(0, 0, 0);

    FsrEasuF(col, gxy, easuParameters[0], easuParameters[1], easuParameters[2], easuParameters[3]);
    outputTex[gxy] = AF4(col, 1);
    
    gxy.x += 8u;
    FsrEasuF(col, gxy, easuParameters[0], easuParameters[1], easuParameters[2], easuParameters[3]);
    outputTex[gxy] = AF4(col, 1);

    gxy.y += 8u;
    FsrEasuF(col, gxy, easuParameters[0], easuParameters[1], easuParameters[2], easuParameters[3]);
    outputTex[gxy] = AF4(col, 1);

    gxy.x -= 8u;
    FsrEasuF(col, gxy, easuParameters[0], easuParameters[1], easuParameters[2], easuParameters[3]);
    outputTex[gxy] = AF4(col, 1);
}

[numthreads(1,1,1)]
void Init()
{
    AU4 con0 = (AU4)0;
    AU4 con1 = (AU4)0;
    AU4 con2 = (AU4)0;
    AU4 con3 = (AU4)0;
    FsrEasuCon(con0,con1,con2,con3,
        easuViewportSize.x,  easuViewportSize.y,
        easuInputImageSize.x,easuInputImageSize.y,
        easuOutputSize.x,    easuOutputSize.y);

    easuParameters[0] = con0;
    easuParameters[1] = con1;
    easuParameters[2] = con2;
    easuParameters[3] = con3;
}